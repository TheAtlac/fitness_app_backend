services:
  server:
    build:
      target: run
      args:
        SERVER_PORT: $SERVER_PORT
    ports:
      - "$SERVER_PORT:$SERVER_PORT"
    environment:
      CORS_ALLOWED_ORIGINS: '["http://localhost:$SERVER_PORT", "http://176.109.107.222:8080"]'
    secrets:
      - initial_user
      - auth_token_secret_key
      - db_url
      - region
      - aws_access_key_id
      - aws_secret_access_key
      - bucket_name
      - aws_endpoint
      - aws_access_domain_name
    depends_on:
      database:
        condition: service_healthy

  database:
    image: postgres:16
    healthcheck:
      test: pg_isready -U $POSTGRES_USER -d $POSTGRES_DATABASE
      interval: 3s
      retries: 15
      start_period: 5s
    volumes:
      - db_data:/var/lib/postgresql/data
      - type: bind
        source: ./db/exercises.sql
        target: /docker-entrypoint-initdb.d/exercises.sql
      - type: bind
        source: ./db/file_entities.sql
        target: /docker-entrypoint-initdb.d/file_entities.sql
      - type: bind
        source: ./db/workouts.sql
        target: /docker-entrypoint-initdb.d/workouts.sql
      - type: bind
        source: ./db/exercise_workouts.sql
        target: /docker-entrypoint-initdb.d/exercise_workouts.sql
    environment:
      POSTGRES_DB: $POSTGRES_DATABASE
      POSTGRES_USER_FILE: "/run/secrets/db_user"
      POSTGRES_PASSWORD_FILE: "/run/secrets/db_password"
    secrets:
      - db_user
      - db_password


secrets:
  auth_token_secret_key:
    environment: AUTH_TOKEN_SECRET_KEY
  initial_user:
    environment: INITIAL_USER
  db_url:
    environment: DB_URL
  db_user:
    environment: POSTGRES_USER
  db_password:
    environment: POSTGRES_PASSWORD
  region:
    environment: REGION
  aws_access_key_id:
    environment: AWS_ACCESS_KEY_ID
  aws_secret_access_key:
    environment: AWS_SECRET_ACCESS_KEY
  bucket_name:
    environment: BUCKET_NAME
  aws_endpoint:
    environment: AWS_ENDPOINT
  aws_access_domain_name:
    environment: AWS_ACCESS_DOMAIN_NAME

volumes:
  db_data:
